---
# TODO:
# Convert all hardcoded strings into variables (also in j2 templates)
# Add handlers

- name: Playbook to install and configure PostgreSQL nodes
  hosts: postgresql
  gather_facts: true

  tasks:
    - name: Install and enable PostgreSQL as root
      become: true
      block:
        - name: Add user postgres to group postgres if cloud-init failed doing that once again
          ansible.builtin.command:
            cmd: usermod -aG postgres postgres

        - name: Update APT and install PostgreSQL 
          ansible.builtin.apt:
            name:
              - postgresql 
              - postgresql-contrib

        - name: Enable and start PostgreSQL service
          ansible.builtin.systemd:
            name: postgresql.service
            enabled: true
            state: started

    - name: Check if main cluster exists and is online
      ansible.builtin.shell: pg_lsclusters | awk '/main/ && /online/'
      register: main
      failed_when: main.stdout | length == 0

    - name: Check if main cluster exists and is online (alternative approach)
      ansible.builtin.shell: pg_ctlcluster 14 main status | grep 'server is running'

    # - name: Print main cluster status
    #   ansible.builtin.debug: 
    #     var: main.stdout

    # - name: Change listen addresses to all interfaces in PostgreSQL cluster configfile
    #   ansible.builtin.lineinfile:
    #     path: /etc/postgresql/14/main/postgresql.conf
    #     regexp: "^#listen_addresses(.*)"
    #     line: listen_addresses = '*'

    - name: Create separate user with replication permissions only
      ansible.builtin.shell: psql --port=5432 --command='create user replicator replication;'
      register: replicator
      # Don't throw errors when user already exists in cluster
      failed_when: not "'already exists' in replicator.stderr"

    - name: Configure pg_hba.conf and postgresql.conf on every PostgreSQL node
      block:
        - name: Delete old config files
          ansible.builtin.file:
            path: "/etc/postgresql/14/main/{{ item.conf }}"
            state: absent
          loop:
            - { conf: postgresql.conf }
            - { conf: pg_hba.conf }

        - name: Generate config files from templates
          ansible.builtin.template:
            src: "{{ playbook_dir }}/templates/{{ item.src }}"
            dest: "/etc/postgresql/14/main/{{ item.dest }}"
          loop:
            - { src: postgresql.j2, dest: postgresql.conf }
            - { src: pg_hba.j2, dest: pg_hba.conf }

        - name: Reload PostgreSQL main cluster on every node
          ansible.builtin.systemd:
            name: postgresql@14-main
            enabled: true
            state: reloaded
          become: true

    - name: Set replicas for replication
      when: inventory_hostname != "postgresql-1"
      block:
        # - name: Stop PostgreSQL replicas
        #   ansible.builtin.systemd:
        #     name: postgresql@14-main
        #     enabled: true
        #     state: stopped
        #   become: true

        - name: Delete all the files within main cluster directory
          ansible.builtin.file: 
            state: absent
            path: /var/lib/postgresql/14/main/

        - name: Launch replication on replicas
          ansible.builtin.command: pg_basebackup -h {{ hostvars['postgresql-1']['ansible_host'] }} -U replicator -p 5432 --checkpoint=fast -D /var/lib/postgresql/14/main/ -R -Fp -Xs --progress --slot=fuckpsql{{ range(1000,9999) | random }} -C

        - name: Reload PostgreSQL replicas
          ansible.builtin.systemd:
            name: postgresql@14-main
            enabled: true
            state: reloaded
          become: true
